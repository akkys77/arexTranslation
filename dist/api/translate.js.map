{"version":3,"sources":["../../src/api/translate.js"],"names":["req","res","result","processString","str","status","json","console","log","rule01","regex","subst","$0","$1","charAt","toLowerCase","substr","test","toUpperCase","rule02a","$2","rule02b","startWithVowel","pattern","startWithUpperCase","applySelectedRule","rule","replace","translateWord","word","lines","split","translatedLines","map","words","line","translatedWords","hyphenatedWord","partOfHyphenatedWord","join","translatedWordsString"],"mappings":"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","file":"translate.js","sourcesContent":["export default (req, res) => {\n  // let term = req.params.term;\n  // res.status(200).json({ in: 'translate', term });\n  let result = processString(str);\n  res.status(200).json({ result });\n  console.log(result);\n};\n\n// Rule for both upper and lower case vowels\nconst rule01 = {\n  regex: /\\b([aeiouAEIOU]\\w*?)\\b/g,\n  // Naive implementation, not consiring upper/ lower case\n  // subst: '$1way'\n  subst: ($0, $1) => {\n    $1 = $1.charAt(0).toLowerCase() + $1.substr(1);\n    let result = $1 + 'way';\n    // If the word was originally entirely in upper case, the result should be upper case\n    if (/^[A-Z]*$/.test($0)) {\n      return result.toUpperCase();\n    }\n    return result;\n  }\n};\n// Rule for upper case consonants\nconst rule02a = {\n  regex: /\\b([^AEIOUQ\\W]\\w*?|Qu\\w*?|QU\\w*?)([aeiouyAEIOUQ]\\w*)\\b/g,\n  // Naive implementation, not consiring upper/ lower case\n  // subst: '$2$1ay'\n  subst: ($0, $1, $2) => {\n    $1 = $1.charAt(0).toLowerCase() + $1.substr(1);\n    $2 = $2.charAt(0).toUpperCase() + $2.substr(1);\n    let result = $2 + $1 + 'ay';\n    // If the word was originally entirely in upper case, the result should be upper case\n    if (/^[A-Z]*$/.test($0)) {\n      return result.toUpperCase();\n    }\n    return result;\n  }\n};\n// Rule for lower case consonants\nconst rule02b = {\n  regex: /\\b([^aeiouq\\W]\\w*?|qu\\w*?)([aeiouyAEIOUQ]\\w*)\\b/g,\n  subst: '$2$1ay'\n};\n\nconst startWithVowel = str => {\n  let pattern = /^[aeiou|AEIOU]/;\n  if (pattern.test(str)) {\n    return true;\n  } else return false;\n};\n\nconst startWithUpperCase = str => {\n  let pattern = /^[A-Z]/;\n  // console.log(str);\n  if (pattern.test(str)) {\n    return true;\n  } else return false;\n};\n\nconst str = `quiet\nyellow\nstyle\nChallenge the status quo\nRoses are ¡red!, violets¹ are blue\nHe is 2 years old@gmail.com\nThe design is state-of-the-art\nin a sentence suddenly HELLO all caps.\nin a sentence suddenly Hello starting caps.\nin a sentence suddenly hello no caps.\nin a sentence suddenly hELLO aWAY no caps.\nAn off-campus apartment ?\nDisquite\nMY HOME IS AWAY`;\n\nconst applySelectedRule = (rule, str) => {\n  const { regex, subst } = rule;\n  const result = str.replace(regex, subst);\n  return result;\n};\n\nconst translateWord = word => {\n  if (startWithVowel(word)) {\n    return applySelectedRule(rule01, word);\n  } else {\n    if (startWithUpperCase(word)) {\n      // console.log('Starts with Upper case: ',word);\n      return applySelectedRule(rule02a, word);\n    } else {\n      // console.log('Starts with Lower case: ',word);\n      return applySelectedRule(rule02b, word);\n    }\n  }\n};\n\nconst processString = str => {\n  // Split each line into an array\n  let lines = str.split('\\n');\n  // return translated lines\n  let translatedLines = lines.map(line => {\n    // For each line, split each word into an array of words\n    let words = line.replace(/([^a-z0-9-,\\s])/, '$1').split(' ');\n    // For each line, return array of translated words\n    let translatedWords = words.map(word => {\n      // We need to consider hyphenated words as mulitple words\n      // Check if there is an hyphen and handle this special case\n      if (/-/.test(word)) {\n        let hyphenatedWord = word.split('-');\n        return (\n          hyphenatedWord\n            // Handle hyphenated words\n            .map(partOfHyphenatedWord => translateWord(partOfHyphenatedWord))\n            // Rebuild hyphenated text string from array\n            .join('-')\n        );\n      } else {\n        // Handle non hyphenated words\n        return translateWord(word);\n      }\n    });\n    // convert array of translated lines to a string\n    let translatedWordsString = translatedWords.join(' ');\n    // console.log(translatedWordsString);\n    return translatedWordsString;\n  });\n  // convert array of lines to string\n  return translatedLines.join('\\n');\n};\n"]}